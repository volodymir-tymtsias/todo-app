{"version":3,"sources":["types/Status.ts","types/TypeError.ts","components/TodoItem.tsx","components/TodosFilter.tsx","utils/fetchClient.ts","api/todos.ts","components/TodoApp.tsx","api/users.ts","App.tsx","index.tsx"],"names":["Status","TypeError","TodoItem","todo","deleteHandler","isProcessed","onUpdate","useState","isFormUpdate","setIsFormUpdate","title","newTitle","setNewTitle","updateHandler","length","id","className","classNames","completed","type","checked","onChange","onSubmit","event","preventDefault","trim","placeholder","value","autoFocus","target","onBlur","onKeyUp","key","onDoubleClick","onClick","defaultProps","TodosFilter","to","isActive","selected","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","updateTodo","todoId","USER_ID","TodoApp","parse","localStorage","getItem","todos","setTodos","saveTodos","currentTodos","setItem","tempTodo","setTempTodo","user","setUser","typeError","setTypeError","textError","setTextError","disableInput","setDisableInput","idTodosLoading","setIdTodosLoading","titleTodo","setTitleTodo","filterByStatus","useLocation","pathname","activeTodos","filter","completedTodos","areAllTodosCompleted","every","todoIdsForDeleting","map","clearingTodos","deleteTodo","all","catch","Delete","finally","indexCurrentTodo","findIndex","TitleIsEmpty","updatedTodo","splice","Update","addHandler","userId","createTodo","addedTodo","Add","useEffect","loadedUser","LoadUser","loadedTodos","LoadTodos","timerId","clearTimeout","visibleTodos","useMemo","Active","Completed","name","active","todoIdsForToggle","togglingTodos","results","data-cy","TransitionGroup","CSSTransition","timeout","includes","style","visibility","hidden","App","path","index","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.32c9f9ae.chunk.js","sourcesContent":["export enum Status {\n  All = '/',\n  Active = '/active',\n  Completed = '/completed',\n}\n","export enum TypeError {\n  LoadTodos = 'Failed to load todos',\n  LoadUser = 'Failed to load user',\n  Add = 'Unable to add a todo',\n  Delete = 'Unable to delete a todo',\n  Update = 'Unable to update a todo',\n  TitleIsEmpty = 'Title can\\'t be empty',\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  deleteHandler?: (todoId: number) => void,\n  isProcessed: boolean,\n  onUpdate?: (todoId: number, title?: string) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  deleteHandler = () => {},\n  isProcessed,\n  onUpdate = () => {},\n}) => {\n  const [isFormUpdate, setIsFormUpdate] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const updateHandler = () => {\n    if (!newTitle.length) {\n      deleteHandler(todo.id);\n    }\n\n    if (newTitle !== todo.title && newTitle.length) {\n      onUpdate(todo.id, newTitle);\n    }\n\n    setIsFormUpdate(false);\n  };\n\n  const changeStatusTodo = () => onUpdate(todo.id);\n  const startEditing = () => setIsFormUpdate(true);\n  const deletingTodo = () => deleteHandler(todo.id);\n  const titleUpdate = () => updateHandler();\n  const submitUpdetedTitle = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    updateHandler();\n    if (!newTitle.trim()) {\n      setNewTitle(todo.title);\n    } else {\n      setNewTitle(newTitle.trim());\n    }\n  };\n\n  const newTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const cancelEditing = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsFormUpdate(false);\n      setNewTitle(todo.title);\n    }\n  };\n\n  return (\n    <div\n      className={classNames(\n        'todo',\n        { completed: todo.completed },\n      )}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={todo.completed}\n          onChange={changeStatusTodo}\n        />\n      </label>\n\n      {isFormUpdate ? (\n        <form\n          onSubmit={submitUpdetedTitle}\n        >\n          <input\n            type=\"text\"\n            className=\"todo__title-field\"\n            placeholder=\"Empty todo will be deleted\"\n            value={newTitle}\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n            onChange={newTitleInput}\n            onBlur={titleUpdate}\n            onKeyUp={cancelEditing}\n          />\n        </form>\n      ) : (\n        <>\n          <span\n            className=\"todo__title\"\n            onDoubleClick={startEditing}\n          >\n            {todo.title}\n          </span>\n\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            onClick={deletingTodo}\n          >\n            &times;\n          </button>\n        </>\n      )}\n\n      <div\n        className={classNames(\n          'modal',\n          'overlay',\n          { 'is-active': isProcessed },\n        )}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n\nTodoItem.defaultProps = {\n  deleteHandler: () => {},\n  onUpdate: () => {},\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const TodosFilter: React.FC = () => {\n  return (\n    <nav className=\"filter\">\n      <NavLink\n        to=\"/\"\n        className={({ isActive }) => classNames(\n          'filter__link',\n          { selected: isActive },\n        )}\n      >\n        All\n      </NavLink>\n\n      <NavLink\n        to=\"/active\"\n        className={({ isActive }) => classNames(\n          'filter__link',\n          { selected: isActive },\n        )}\n      >\n        Active\n      </NavLink>\n\n      <NavLink\n        to=\"/completed\"\n        className={({ isActive }) => classNames(\n          'filter__link',\n          { selected: isActive },\n        )}\n      >\n        Completed\n      </NavLink>\n    </nav>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Todo } from '../types/Todo';\nimport { DataForUpdate } from '../types/DataForUpdate';\nimport { client } from '../utils/fetchClient';\n\ntype TodoForPost = {\n  userId: number;\n  title: string;\n  completed: boolean;\n};\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (data: TodoForPost) => {\n  return client.post<Todo>('/todos', data);\n};\n\nexport const updateTodo = (todoId: number, data: DataForUpdate) => {\n  return client.patch<Todo>(`/todos/${todoId}`, data);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport classNames from 'classnames';\nimport { useLocation } from 'react-router-dom';\nimport { Todo } from '../types/Todo';\nimport { Status } from '../types/Status';\nimport { TypeError } from '../types/TypeError';\nimport { TodoItem } from './TodoItem';\nimport { TodosFilter } from './TodosFilter';\nimport {\n  getTodos,\n  createTodo,\n  deleteTodo,\n  updateTodo,\n} from '../api/todos';\nimport { getUser } from '../api/users';\nimport { User } from '../types/User';\n\nconst USER_ID = 10433;\n\nexport const TodoApp: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(\n    JSON.parse(localStorage.getItem('todos') || 'null') || [],\n  );\n  const saveTodos = (currentTodos: Todo[]) => {\n    setTodos(currentTodos);\n    localStorage.setItem('todos', JSON.stringify(currentTodos));\n  };\n\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [typeError, setTypeError] = useState('');\n  const [textError, setTextError] = useState('');\n  const [disableInput, setDisableInput] = useState(false);\n  const [idTodosLoading, setIdTodosLoading] = useState<number[]>([]);\n  const [titleTodo, setTitleTodo] = useState('');\n  const filterByStatus = useLocation().pathname;\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n  const areAllTodosCompleted = todos.every(todo => todo.completed);\n\n  const deleteHandler = (todoId?: number) => {\n    setTypeError('');\n    const todoIdsForDeleting = todoId\n      ? [todoId]\n      : completedTodos.map(todo => todo.id);\n\n    setIdTodosLoading(todoIdsForDeleting);\n    const clearingTodos = todoIdsForDeleting.map(id => deleteTodo(id));\n\n    Promise.all(clearingTodos)\n      .then(() => {\n        saveTodos(todoId\n          ? todos.filter(todo => todo.id !== todoId)\n          : [...activeTodos]);\n      })\n      .catch(() => {\n        setTypeError(TypeError.Delete);\n        setTextError(TypeError.Delete);\n      })\n      .finally(() => {\n        setIdTodosLoading([]);\n      });\n  };\n\n  const updateHandler = (todoId: number, title?: string) => {\n    const indexCurrentTodo = todos.findIndex(todo => todo.id === todoId);\n    const data = title\n      ? { title: title.trim() }\n      : { completed: !todos[indexCurrentTodo].completed };\n\n    if (title && !title.trim()) {\n      setTypeError(TypeError.TitleIsEmpty);\n      setTextError(TypeError.TitleIsEmpty);\n\n      return;\n    }\n\n    setTypeError('');\n    setIdTodosLoading([todoId]);\n\n    updateTodo(todoId, data)\n      .then((updatedTodo) => {\n        todos.splice(indexCurrentTodo, 1, updatedTodo);\n        saveTodos([...todos]);\n      })\n      .catch(() => {\n        setTypeError(TypeError.Update);\n        setTextError(TypeError.Update);\n      })\n      .finally(() => setIdTodosLoading([]));\n  };\n\n  const toggleAllHandler = () => {\n    const todoIdsForToggle = areAllTodosCompleted\n      ? completedTodos.map(todo => todo.id)\n      : activeTodos.map(todo => todo.id);\n    const data = { completed: !areAllTodosCompleted };\n\n    setTypeError('');\n    setIdTodosLoading(todoIdsForToggle);\n    const togglingTodos = todoIdsForToggle.map(id => updateTodo(id, data));\n\n    Promise.all(togglingTodos)\n      .then((results) => {\n        saveTodos(areAllTodosCompleted\n          ? results\n          : todos.map(todo => ({ ...todo, completed: true })));\n      })\n      .catch(() => {\n        setTypeError(TypeError.Update);\n        setTextError(TypeError.Update);\n      })\n      .finally(() => setIdTodosLoading([]));\n  };\n\n  const addHandler = () => {\n    if (!titleTodo.trim()) {\n      setTitleTodo('');\n      setTypeError(TypeError.TitleIsEmpty);\n      setTextError(TypeError.TitleIsEmpty);\n\n      return;\n    }\n\n    const data = {\n      userId: USER_ID,\n      title: titleTodo.trim(),\n      completed: false,\n    };\n\n    setTypeError('');\n    setDisableInput(true);\n    setTempTodo({ ...data, id: 0 });\n\n    createTodo(data)\n      .then((addedTodo) => {\n        saveTodos([...todos, addedTodo]);\n        setTitleTodo('');\n      })\n      .catch(() => {\n        setTypeError(TypeError.Add);\n        setTextError(TypeError.Add);\n      })\n      .finally(() => {\n        setTempTodo(null);\n        setDisableInput(false);\n      });\n  };\n\n  const closeErrorMessage = () => setTypeError('');\n\n  useEffect(() => {\n    getUser(USER_ID)\n      .then(loadedUser => setUser(loadedUser))\n      .catch(() => {\n        setTypeError(TypeError.LoadUser);\n        setTextError(TypeError.LoadUser);\n      });\n  }, []);\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(loadedTodos => saveTodos(loadedTodos))\n      .catch(() => {\n        setTypeError(TypeError.LoadTodos);\n        setTextError(TypeError.LoadTodos);\n      });\n  }, []);\n\n  useEffect(() => {\n    const timerId = setTimeout(setTypeError, 3000, '');\n\n    return () => clearTimeout(timerId);\n  }, [typeError]);\n\n  const visibleTodos = useMemo(() => {\n    switch (filterByStatus) {\n      case Status.Active:\n        return activeTodos;\n\n      case Status.Completed:\n        return completedTodos;\n\n      default:\n        return todos;\n    }\n  }, [filterByStatus, todos]);\n\n  const submitNewTitle = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    addHandler();\n  };\n\n  const titleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!disableInput) {\n      setTitleTodo(event.target.value);\n    }\n  };\n\n  const clearCompletedTodos = () => deleteHandler();\n  const getUserName = () => (user ? user.name : '');\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n      <h5 className=\"todoapp__subtitle\">{getUserName()}</h5>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          {!!todos.length && (\n            <button\n              type=\"button\"\n              className={classNames(\n                'todoapp__toggle-all',\n                { active: areAllTodosCompleted },\n              )}\n              onClick={toggleAllHandler}\n            />\n          )}\n\n          <form\n            onSubmit={submitNewTitle}\n          >\n            <input\n              type=\"text\"\n              className=\"todoapp__new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={titleTodo}\n              onChange={titleInput}\n              data-cy=\"createTodo\"\n            />\n          </form>\n        </header>\n\n        {(!!todos.length || tempTodo) && (\n          <>\n            <section className=\"todoapp__main\">\n              <TransitionGroup>\n                {visibleTodos.map(todo => (\n                  <CSSTransition\n                    key={todo.id}\n                    timeout={500}\n                    classNames=\"item\"\n                  >\n                    <TodoItem\n                      todo={todo}\n                      deleteHandler={deleteHandler}\n                      isProcessed={idTodosLoading.includes(todo.id)}\n                      onUpdate={updateHandler}\n                    />\n                  </CSSTransition>\n                ))}\n                {tempTodo && (\n                  <CSSTransition\n                    key={0}\n                    timeout={500}\n                    classNames=\"temp-item\"\n                  >\n                    <TodoItem\n                      todo={tempTodo}\n                      isProcessed\n                    />\n                  </CSSTransition>\n                )}\n              </TransitionGroup>\n            </section>\n\n            <footer className=\"todoapp__footer\">\n              <span className=\"todo-count\">\n                {`${activeTodos.length} items left`}\n              </span>\n\n              <TodosFilter />\n\n              <button\n                type=\"button\"\n                className=\"todoapp__clear-completed\"\n                style={{\n                  visibility: completedTodos.length\n                    ? 'visible'\n                    : 'hidden',\n                }}\n                onClick={clearCompletedTodos}\n              >\n                Clear completed\n              </button>\n            </footer>\n          </>\n        )}\n      </div>\n\n      <div\n        className={classNames(\n          'notification',\n          'is-danger',\n          'is-light',\n          'has-text-weight-normal',\n          { hidden: !typeError },\n        )}\n      >\n        <button\n          type=\"button\"\n          className=\"delete\"\n          onClick={closeErrorMessage}\n        />\n        {textError}\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUser = (userId: number) => {\n  return client.get<User>(`/users/${userId}`);\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { TodoApp } from './components/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <Routes>\n      <Route path=\"/\">\n        <Route index element={<TodoApp />} />\n        <Route path=\"active\" element={<TodoApp />} />\n        <Route path=\"completed\" element={<TodoApp />} />\n      </Route>\n    </Routes>\n  );\n};\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}